import { logger } from '@ersanyamarya/common-node-utils'
import { OpenAI } from 'langchain/llms/openai'
import { StructuredOutputParser, OutputFixingParser } from 'langchain/output_parsers'
import { ZodTypeAny } from 'zod'

/**
 * The function `parseOutput` takes an output string, a parsed response object, an OpenAI instance, and
 * a structured output parser, and attempts to parse the output string using the parser. If parsing
 * fails, it attempts to fix the parser and parse the output again. Finally, it returns the parsed
 * response object.
 * @param {string} output - The `output` parameter is a string that represents the output generated by
 * a function or process.
 * @param {T} parsedResponse - The `parsedResponse` parameter is the initial value of the parsed
 * response. It is of type `T`, which means it can be any type specified when calling the `parseOutput`
 * function.
 * @param {OpenAI} llm - The `llm` parameter is an instance of the `OpenAI` class, which is used for
 * making API requests to the OpenAI API.
 * @param parser - The `parser` parameter is an instance of the `StructuredOutputParser` class, which
 * is responsible for parsing the output string and returning a structured response of type `T`. It is
 * a generic type that can be any type you specify.
 * @returns The function `parseOutput` returns a Promise of type `T`, which is the parsed response.
 */
export async function parseOutput<T>(
  output: string,
  parsedResponse: T,
  llm: OpenAI,
  parser: StructuredOutputParser<ZodTypeAny>
): Promise<T> {
  try {
    logger.info('-----------------Parsing Response-----------------')
    parsedResponse = await parser.parse(output)
  } catch (error) {
    logger.info('-----------------Parsing Failed-----------------')
    logger.error(error)
    logger.info('-----------------Fixing Parser-----------------')

    try {
      const fixParser = OutputFixingParser.fromLLM(llm, parser)
      parsedResponse = await fixParser.parse(output)
    } catch (error) {
      logger.error(error)
    }
  }
  logger.info('-----------------Response Parsed-----------------')
  return parsedResponse
}
